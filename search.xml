<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[What is Numpy]]></title>
      <url>/2017/11/16/python/numpy/01_what_is_numpy/</url>
      <content type="html"><![CDATA[<h1 id="What-is-Numpy"><a href="#What-is-Numpy" class="headerlink" title="What is Numpy"></a>What is Numpy</h1><blockquote>
<p><code>Numpy</code>是Python科学计算的基本包，提供对于多维数组（矩阵）等各种计算，比如c = a * b，a、b均为矩阵，可以对其进行直接计算，不用使用循环遍历。<br>本机测试计算速度为for循环遍历计算的500+倍。例子如下：目前找不到源网页，直接粘上例子。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import numpy as np </div><div class="line">import time</div><div class="line">#from timeit import timeit</div><div class="line"></div><div class="line">a = np.random.rand(1000000)</div><div class="line">b = np.random.rand(1000000)</div><div class="line"></div><div class="line">time_s = time.time()</div><div class="line">c = np.dot(a, b)</div><div class="line">time_e = time.time()</div><div class="line">print(c, 1000*(time_e - time_s))</div><div class="line"></div><div class="line">c = 0</div><div class="line">time_s = time.time()</div><div class="line">for i in range(len(a)):</div><div class="line">	c += a[i] * b[i]</div><div class="line">time_e = time.time()</div><div class="line">print(c, 1000*(time_e - time_s))</div></pre></td></tr></table></figure>
<h2 id="矢量化-Vectorization"><a href="#矢量化-Vectorization" class="headerlink" title="矢量化(Vectorization)"></a>矢量化(Vectorization)</h2><blockquote>
<p>上面的例子是矢量化的例子（Vectorization），包含以下优点：</p>
<ul>
<li>代码更简洁</li>
<li>更少的代码通常意味着更少的错误</li>
<li>代码运行更接近标准的数学符号，封装了具体的困难的运算，如上np.dot(a, b)直接计算两个矩阵的积。</li>
<li>矢量化导致更多的“Pythonic”(网络解释为很Python的Python代码)代码。如果没有向量化，我们的代码将会效率很低，难以读取for循环。</li>
</ul>
</blockquote>
<h2 id="广播-Broadcasting"><a href="#广播-Broadcasting" class="headerlink" title="广播(Broadcasting)"></a>广播(Broadcasting)</h2><blockquote>
<p>广播是用于描述操作的隐式逐个元素行为的术语<br>大概意思就是比如做矩阵的运算，a为一维矩阵，b为标量，如果做计算<code>a + b</code>，会自动的将a的元素都加上b（我的简单理解）</p>
</blockquote>
<h1 id="源网站"><a href="#源网站" class="headerlink" title="源网站"></a>源网站</h1><blockquote>
<p><a href="http://python.usyiyi.cn" title="Numpy 中文API" target="_blank" rel="external">Numpy 中文 API</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Learn Numpy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 git rm --cached filename 删除提交的文件]]></title>
      <url>/2017/11/05/git/git_rm_use_cached/</url>
      <content type="html"><![CDATA[<h1 id="目的为了测试Markdown书写"><a href="#目的为了测试Markdown书写" class="headerlink" title="目的为了测试Markdown书写"></a>目的为了测试Markdown书写</h1><blockquote>
<p>本人在学习 git 的时候，前期将本地的日志文件提交到仓库，然后也就查找了相关的操作方法，最终使用此命令解决的，然后新增<code>.gitignore</code>文件，提交，再次使用<code>git status</code>这些文件就不会再次出现了，其他情况也可以使用这个方法：将数据库账号密码配置文件从远端仓库删除。</p>
</blockquote>
<h1 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h1><h2 id="git-rm-Filename-or-Foldername："><a href="#git-rm-Filename-or-Foldername：" class="headerlink" title="git rm Filename or Foldername："></a>git rm Filename or Foldername：</h2><blockquote>
<p>使用在当我们提交了一个不想提交的文件，可以使用其删除本地工作目录的文件，一般我们可能需要保留源文件，所以可以使用：<code>--cached</code>参数来实现只删除索引（官方：Index，跟踪的文件清单）。</p>
</blockquote>
<h2 id="git-rm-–cached-Filename-or-Foldername："><a href="#git-rm-–cached-Filename-or-Foldername：" class="headerlink" title="git rm –cached Filename or Foldername："></a>git rm –cached Filename or Foldername：</h2><blockquote>
<p>使用 <code>--cached</code> 将会保留本地文件，只删除暂存区的文件，提交这次修改，该文件就不会纳入版本管理了，远端的仓库也会同步这个修改，达到删除文件目的。</p>
</blockquote>
<h2 id="常用参数："><a href="#常用参数：" class="headerlink" title="常用参数："></a>常用参数：</h2><blockquote>
<ul>
<li><code>-n</code> or <code>--dry-run</code> 加上这个参数是不会做任何删除操作的，只是将符合<code>filename</code>删除的文件预览打印出来，准确的说加上这个参数会打印此操作产生影响（删除）的文件列表。<ul>
<li><code>git rm -n --cached txt/\\*.txt</code>  #将会列出txt目录下的符合拓展名字为.txt的文件，反斜杠<code>\</code>为转义字符。</li>
</ul>
</li>
<li><code>-f</code> 这个参数是强制执行的意思，如果我们已经将文件提交到暂存区，这个时候需要加上这个参数。</li>
<li><code>-r</code> 类似bash命令就是递归删除了，如果删除目录使用此参数。</li>
</ul>
</blockquote>
<h2 id="官网相关页面："><a href="#官网相关页面：" class="headerlink" title="官网相关页面："></a>官网相关页面：</h2><blockquote>
<p><a href="https://git-scm.com/docs/git-rm" title="get-rm" target="_blank" rel="external">git-rm</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git rm 删除 文件 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
